name: Deploy API

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    # This allows manual triggering from GitHub Actions tab

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: 20.62.249.125
          username: azureuser
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create directory structure
            mkdir -p ~/simple-api
            
            # Create app.py file
            cat > ~/simple-api/app.py << 'EOL'
            from flask import Flask, jsonify

            app = Flask(__name__)

            @app.route('/sayHello', methods=['GET'])
            def say_hello():
                return jsonify({"message": "Hello User."})

            if __name__ == '__main__':
                app.run(host='0.0.0.0', port=80, debug=False)
            EOL
            
            # Create requirements.txt file
            cat > ~/simple-api/requirements.txt << 'EOL'
            flask==2.0.1
            werkzeug==2.0.3
            gunicorn==20.1.0
            EOL
            
            # Display Python version
            echo "Python version:"
            python3 --version
            
            # Install required packages
            echo "Installing required packages..."
            sudo apt-get update || true
            sudo apt-get install -y python3-venv net-tools || true
            
            # Setup virtual environment
            cd ~/simple-api
            if [ ! -d "venv" ]; then
              echo "Creating new virtual environment..."
              python3 -m venv venv || true
            else
              echo "Using existing virtual environment..."
            fi
            
            # Activate virtual environment
            echo "Activating virtual environment..."
            source venv/bin/activate || true
            
            # Install dependencies
            echo "Installing dependencies..."
            pip install -r requirements.txt || true
            
            # Kill any existing application (don't fail if nothing found)
            echo "Stopping any existing application..."
            sudo pkill -f "python3 app.py" || true
            
            # Run application
            echo "Starting application..."
            sudo nohup python app.py > app.log 2>&1 & echo $! > app.pid
            sleep 2
            echo "App started with PID: $(cat app.pid)"
            
            # Check if app is running
            echo "Checking running Python processes:"
            ps aux | grep python || true
            
            # Verify deployment without using netstat
            echo "Testing API response:"
            curl -v http://localhost/sayHello || echo "API not responding" 
